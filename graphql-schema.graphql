type Order {
  orderId: ID!
  customerId: String!
  driverId: String
  merchantId: String!
  items: [OrderItem!]!
  status: OrderStatus!
  amount: Float!
  deliveryAddress: Address!
  merchantAddress: Address!
  estimatedDeliveryTime: AWSDateTime
  actualDeliveryTime: AWSDateTime
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  notes: String
  paymentMethod: PaymentMethod!
  deliveryFee: Float!
  rating: Int
  review: String
}

type OrderItem {
  itemId: String!
  name: String!
  quantity: Int!
  price: Float!
  specialInstructions: String
}

type Address {
  street: String!
  city: String!
  district: String!
  latitude: Float!
  longitude: Float!
  instructions: String
}

type Driver {
  driverId: ID!
  email: String!
  firstName: String!
  lastName: String!
  phoneNumber: String!
  status: DriverStatus!
  currentLocation: Location
  vehicle: Vehicle!
  zone: String!
  rating: Float
  totalDeliveries: Int!
  isOnline: Boolean!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Vehicle {
  type: VehicleType!
  licensePlate: String!
  model: String!
  color: String!
}

type Location {
  latitude: Float!
  longitude: Float!
  timestamp: AWSDateTime!
}

type Merchant {
  merchantId: ID!
  name: String!
  email: String!
  phoneNumber: String!
  address: Address!
  category: MerchantCategory!
  zone: String!
  isActive: Boolean!
  rating: Float
  averagePreparationTime: Int
  menu: [MenuItem!]
  operatingHours: OperatingHours!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type MenuItem {
  itemId: String!
  name: String!
  description: String
  price: Float!
  category: String!
  isAvailable: Boolean!
  preparationTime: Int
  image: String
}

type OperatingHours {
  monday: DayHours
  tuesday: DayHours
  wednesday: DayHours
  thursday: DayHours
  friday: DayHours
  saturday: DayHours
  sunday: DayHours
}

type DayHours {
  open: String!
  close: String!
  isOpen: Boolean!
}

type Customer {
  customerId: ID!
  email: String!
  firstName: String!
  lastName: String!
  phoneNumber: String
  addresses: [Address!]
  defaultPaymentMethod: PaymentMethod
  orderHistory: [Order!]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type AuthResult {
  success: Boolean!
  message: String!
  user: User
  accessToken: String
  refreshToken: String
}

type User {
  userId: ID!
  email: String!
  firstName: String!
  lastName: String!
  userType: UserType!
  isActive: Boolean!
  createdAt: AWSDateTime!
  lastLoginAt: AWSDateTime
}

# Enums
enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY_FOR_PICKUP
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum DriverStatus {
  AVAILABLE
  BUSY
  OFFLINE
  ON_BREAK
}

enum VehicleType {
  MOTORCYCLE
  CAR
  BICYCLE
  WALKING
}

enum MerchantCategory {
  RESTAURANT
  GROCERY
  PHARMACY
  ELECTRONICS
  CLOTHING
  OTHER
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  DIGITAL_WALLET
}

enum UserType {
  CUSTOMER
  DRIVER
  MERCHANT
  ADMIN
}

# Input Types
input CreateOrderInput {
  customerId: String!
  merchantId: String!
  items: [OrderItemInput!]!
  deliveryAddress: AddressInput!
  paymentMethod: PaymentMethod!
  notes: String
}

input OrderItemInput {
  itemId: String!
  name: String!
  quantity: Int!
  price: Float!
  specialInstructions: String
}

input AddressInput {
  street: String!
  city: String!
  district: String!
  latitude: Float!
  longitude: Float!
  instructions: String
}

input UpdateOrderStatusInput {
  orderId: ID!
  status: OrderStatus!
  driverId: String
  estimatedDeliveryTime: AWSDateTime
  actualDeliveryTime: AWSDateTime
}

input UpdateDriverLocationInput {
  driverId: ID!
  latitude: Float!
  longitude: Float!
}

input LoginInput {
  email: String!
  password: String!
}

input RegisterCustomerInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phoneNumber: String
}

input RegisterDriverInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phoneNumber: String!
  vehicle: VehicleInput!
  zone: String!
}

input VehicleInput {
  type: VehicleType!
  licensePlate: String!
  model: String!
  color: String!
}

input RegisterMerchantInput {
  email: String!
  password: String!
  name: String!
  phoneNumber: String!
  address: AddressInput!
  category: MerchantCategory!
  zone: String!
}

# Root Types
type Query {
  # Authentication
  getCurrentUser: User @aws_auth(cognito_groups: ["Customers", "Drivers", "Merchants", "Admins"])
  
  # Orders
  getOrder(orderId: ID!): Order @aws_auth(cognito_groups: ["Customers", "Drivers", "Merchants", "Admins"])
  getOrdersByCustomer(customerId: String!, limit: Int, nextToken: String): OrderConnection @aws_auth(cognito_groups: ["Customers", "Admins"])
  getOrdersByDriver(driverId: String!, status: OrderStatus, limit: Int, nextToken: String): OrderConnection @aws_auth(cognito_groups: ["Drivers", "Admins"])
  getOrdersByMerchant(merchantId: String!, status: OrderStatus, limit: Int, nextToken: String): OrderConnection @aws_auth(cognito_groups: ["Merchants", "Admins"])
  getActiveOrders(limit: Int, nextToken: String): OrderConnection @aws_auth(cognito_groups: ["Admins"])
  
  # Drivers
  getDriver(driverId: ID!): Driver @aws_auth(cognito_groups: ["Drivers", "Admins"])
  getAvailableDrivers(zone: String): [Driver!]! @aws_auth(cognito_groups: ["Admins"])
  getDriversByZone(zone: String!, status: DriverStatus, limit: Int, nextToken: String): DriverConnection @aws_auth(cognito_groups: ["Admins"])
  
  # Merchants
  getMerchant(merchantId: ID!): Merchant @aws_auth(cognito_groups: ["Merchants", "Customers", "Admins"])
  getMerchantsByZone(zone: String!, category: MerchantCategory, limit: Int, nextToken: String): MerchantConnection @aws_auth(cognito_groups: ["Customers", "Admins"])
  searchMerchants(searchTerm: String!, zone: String, category: MerchantCategory, limit: Int, nextToken: String): MerchantConnection @aws_auth(cognito_groups: ["Customers", "Admins"])
  
  # Customers
  getCustomer(customerId: ID!): Customer @aws_auth(cognito_groups: ["Customers", "Admins"])
  
  # Analytics (Admin only)
  getOrderStats(startDate: AWSDateTime!, endDate: AWSDateTime!): OrderStats @aws_auth(cognito_groups: ["Admins"])
  getDriverStats(driverId: String, startDate: AWSDateTime!, endDate: AWSDateTime!): DriverStats @aws_auth(cognito_groups: ["Drivers", "Admins"])
}

type Mutation {
  # Authentication
  login(input: LoginInput!): AuthResult
  logout: Boolean! @aws_auth(cognito_groups: ["Customers", "Drivers", "Merchants", "Admins"])
  registerCustomer(input: RegisterCustomerInput!): AuthResult
  registerDriver(input: RegisterDriverInput!): AuthResult
  registerMerchant(input: RegisterMerchantInput!): AuthResult
  
  # Orders
  createOrder(input: CreateOrderInput!): Order! @aws_auth(cognito_groups: ["Customers"])
  updateOrderStatus(input: UpdateOrderStatusInput!): Order! @aws_auth(cognito_groups: ["Drivers", "Merchants", "Admins"])
  cancelOrder(orderId: ID!, reason: String): Order! @aws_auth(cognito_groups: ["Customers", "Admins"])
  assignDriverToOrder(orderId: ID!, driverId: String!): Order! @aws_auth(cognito_groups: ["Admins"])
  rateOrder(orderId: ID!, rating: Int!, review: String): Order! @aws_auth(cognito_groups: ["Customers"])
  
  # Driver Management
  updateDriverStatus(driverId: ID!, status: DriverStatus!): Driver! @aws_auth(cognito_groups: ["Drivers", "Admins"])
  updateDriverLocation(input: UpdateDriverLocationInput!): Driver! @aws_auth(cognito_groups: ["Drivers"])
  
  # Merchant Management
  updateMerchantStatus(merchantId: ID!, isActive: Boolean!): Merchant! @aws_auth(cognito_groups: ["Merchants", "Admins"])
  updateMenuItemAvailability(merchantId: ID!, itemId: String!, isAvailable: Boolean!): Merchant! @aws_auth(cognito_groups: ["Merchants"])
}

type Subscription {
  # Real-time Order Updates
  onOrderStatusChanged(customerId: String): Order
    @aws_subscribe(mutations: ["updateOrderStatus", "createOrder", "cancelOrder"])
    @aws_auth(cognito_groups: ["Customers", "Drivers", "Merchants", "Admins"])
  
  onOrderAssignedToDriver(driverId: String!): Order
    @aws_subscribe(mutations: ["assignDriverToOrder", "updateOrderStatus"])
    @aws_auth(cognito_groups: ["Drivers"])
  
  onNewOrderForMerchant(merchantId: String!): Order
    @aws_subscribe(mutations: ["createOrder"])
    @aws_auth(cognito_groups: ["Merchants"])
  
  # Real-time Driver Updates
  onDriverLocationChanged(orderId: String): Driver
    @aws_subscribe(mutations: ["updateDriverLocation"])
    @aws_auth(cognito_groups: ["Customers", "Admins"])
  
  onDriverStatusChanged(zone: String): Driver
    @aws_subscribe(mutations: ["updateDriverStatus"])
    @aws_auth(cognito_groups: ["Admins"])
}

# Connection Types for Pagination
type OrderConnection {
  items: [Order!]!
  nextToken: String
}

type DriverConnection {
  items: [Driver!]!
  nextToken: String
}

type MerchantConnection {
  items: [Merchant!]!
  nextToken: String
}

# Analytics Types
type OrderStats {
  totalOrders: Int!
  totalRevenue: Float!
  averageOrderValue: Float!
  ordersByStatus: [StatusCount!]!
  ordersByHour: [HourlyCount!]!
}

type DriverStats {
  totalDeliveries: Int!
  totalEarnings: Float!
  averageRating: Float!
  averageDeliveryTime: Int!
  hoursWorked: Float!
}

type StatusCount {
  status: OrderStatus!
  count: Int!
}

type HourlyCount {
  hour: Int!
  count: Int!
}
