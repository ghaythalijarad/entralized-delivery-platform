AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS-Native Centralized Delivery Platform - AppSync + DynamoDB'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'staging', 'prod']

Resources:
  # DynamoDB Tables for Delivery Platform
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${Environment}-delivery-orders'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: orderId
          AttributeType: S
        - AttributeName: customerId
          AttributeType: S
        - AttributeName: driverId
          AttributeType: S
        - AttributeName: merchantId
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: orderId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: CustomerIndex
          KeySchema:
            - AttributeName: customerId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: DriverIndex
          KeySchema:
            - AttributeName: driverId
              KeyType: HASH
            - AttributeName: status
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: MerchantIndex
          KeySchema:
            - AttributeName: merchantId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  DriversTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${Environment}-delivery-drivers'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: driverId
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: zone
          AttributeType: S
      KeySchema:
        - AttributeName: driverId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: StatusZoneIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: zone
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  MerchantsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${Environment}-delivery-merchants'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: merchantId
          AttributeType: S
        - AttributeName: zone
          AttributeType: S
        - AttributeName: category
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: appliedAt
          AttributeType: S
      KeySchema:
        - AttributeName: merchantId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ZoneCategoryIndex
          KeySchema:
            - AttributeName: zone
              KeyType: HASH
            - AttributeName: category
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: StatusIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: appliedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  CustomersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${Environment}-delivery-customers'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: customerId
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: customerId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # AppSync GraphQL API
  DeliveryGraphQLAPI:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub '${Environment}-delivery-platform-api'
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        UserPoolId: !Ref DeliveryUserPool
        AwsRegion: !Ref AWS::Region
        DefaultAction: ALLOW
      AdditionalAuthenticationProviders:
        - AuthenticationType: API_KEY
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt AppSyncServiceRole.Arn
        FieldLogLevel: ALL

  # API Key for development
  DeliveryAPIKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt DeliveryGraphQLAPI.ApiId
      Description: 'Development API Key'
      Expires: !Ref 'AWS::NoValue'

  # Cognito User Pool
  DeliveryUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${Environment}-delivery-users'
      MfaConfiguration: OPTIONAL
      EnabledMfas:
        - SOFTWARE_TOKEN_MFA
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      Schema:
        - Name: email
          Required: true
          Mutable: false
        - Name: family_name
          Required: true
          Mutable: true
        - Name: given_name
          Required: true
          Mutable: true
        - Name: phone_number
          Required: false
          Mutable: true
        - Name: user_type
          AttributeDataType: String
          Required: false
          Mutable: true

  DeliveryUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref DeliveryUserPool
      ClientName: !Sub '${Environment}-delivery-web-client'
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - http://localhost:3000
        - https://main.d1l2ynfxs4bd2p.amplifyapp.com
      LogoutURLs:
        - http://localhost:3000
        - https://main.d1l2ynfxs4bd2p.amplifyapp.com
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true

  # API Gateway for Merchant Management
  MerchantManagementAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${Environment}-merchant-management-api'
      Description: 'API for merchant management operations'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resources
  MerchantsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt MerchantManagementAPI.RootResourceId
      PathPart: merchants
      RestApiId: !Ref MerchantManagementAPI

  MerchantResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref MerchantsResource
      PathPart: '{merchantId}'
      RestApiId: !Ref MerchantManagementAPI

  ReviewResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref MerchantResource
      PathPart: review
      RestApiId: !Ref MerchantManagementAPI

  # Lambda Functions
  MerchantManagementLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt MerchantsTable.Arn
                  - !Sub '${MerchantsTable.Arn}/index/*'
        - PolicyName: SNSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref MerchantNotificationTopic
        - PolicyName: SESAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'

  GetMerchantsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-get-merchants'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt MerchantManagementLambdaRole.Arn
      Environment:
        Variables:
          MERCHANTS_TABLE: !Ref MerchantsTable
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from boto3.dynamodb.conditions import Key
          
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table(os.environ['MERCHANTS_TABLE'])
          
          def lambda_handler(event, context):
              try:
                  # Get query parameters
                  query_params = event.get('queryStringParameters', {}) or {}
                  status_filter = query_params.get('status')
                  
                  headers = {
                      'Content-Type': 'application/json',
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                      'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS'
                  }
                  
                  if status_filter:
                      # Query by status using GSI
                      response = table.query(
                          IndexName='StatusIndex',
                          KeyConditionExpression=Key('status').eq(status_filter),
                          ScanIndexForward=False  # Sort by appliedAt descending
                      )
                  else:
                      # Scan all merchants
                      response = table.scan()
                  
                  items = response.get('Items', [])
                  
                  # Convert DynamoDB Decimal to float for JSON serialization
                  for item in items:
                      for key, value in item.items():
                          if isinstance(value, boto3.dynamodb.types.TypeDeserializer().deserialize({'N': '0'}).__class__):
                              item[key] = float(value)
                  
                  return {
                      'statusCode': 200,
                      'headers': headers,
                      'body': json.dumps({
                          'merchants': items,
                          'count': len(items)
                      })
                  }
                  
              except Exception as e:
                  print(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': headers,
                      'body': json.dumps({'error': str(e)})
                  }

  ReviewMerchantFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-review-merchant'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt MerchantManagementLambdaRole.Arn
      Environment:
        Variables:
          MERCHANTS_TABLE: !Ref MerchantsTable
          SNS_TOPIC: !Ref MerchantNotificationTopic
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from datetime import datetime
          
          dynamodb = boto3.resource('dynamodb')
          sns = boto3.client('sns')
          ses = boto3.client('ses')
          table = dynamodb.Table(os.environ['MERCHANTS_TABLE'])
          
          def lambda_handler(event, context):
              try:
                  headers = {
                      'Content-Type': 'application/json',
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                      'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS'
                  }
                  
                  # Get merchant ID from path
                  merchant_id = event['pathParameters']['merchantId']
                  
                  # Parse request body
                  body = json.loads(event['body'])
                  decision = body.get('decision')  # 'approved' or 'rejected'
                  comments = body.get('comments', '')
                  reviewer_id = body.get('reviewerId')
                  
                  if decision not in ['approved', 'rejected']:
                      return {
                          'statusCode': 400,
                          'headers': headers,
                          'body': json.dumps({'error': 'Invalid decision. Must be approved or rejected.'})
                      }
                  
                  # Get current merchant data
                  merchant_response = table.get_item(Key={'merchantId': merchant_id})
                  if 'Item' not in merchant_response:
                      return {
                          'statusCode': 404,
                          'headers': headers,
                          'body': json.dumps({'error': 'Merchant not found'})
                      }
                  
                  merchant = merchant_response['Item']
                  
                  # Update merchant status
                  update_expression = 'SET #status = :status, reviewedAt = :reviewedAt, reviewerId = :reviewerId'
                  expression_values = {
                      ':status': decision,
                      ':reviewedAt': datetime.utcnow().isoformat(),
                      ':reviewerId': reviewer_id
                  }
                  expression_names = {'#status': 'status'}
                  
                  if decision == 'approved':
                      update_expression += ', approvedAt = :approvedAt'
                      expression_values[':approvedAt'] = datetime.utcnow().isoformat()
                  elif decision == 'rejected':
                      update_expression += ', rejectedAt = :rejectedAt, rejectionReason = :rejectionReason'
                      expression_values[':rejectedAt'] = datetime.utcnow().isoformat()
                      expression_values[':rejectionReason'] = comments
                  
                  if comments:
                      update_expression += ', reviewComments = :comments'
                      expression_values[':comments'] = comments
                  
                  # Update in DynamoDB
                  table.update_item(
                      Key={'merchantId': merchant_id},
                      UpdateExpression=update_expression,
                      ExpressionAttributeValues=expression_values,
                      ExpressionAttributeNames=expression_names
                  )
                  
                  # Send notification
                  await_send_notification(merchant, decision, comments)
                  
                  return {
                      'statusCode': 200,
                      'headers': headers,
                      'body': json.dumps({
                          'message': f'Merchant {decision} successfully',
                          'merchantId': merchant_id,
                          'decision': decision
                      })
                  }
                  
              except Exception as e:
                  print(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': headers,
                      'body': json.dumps({'error': str(e)})
                  }
          
          def await_send_notification(merchant, decision, comments):
              try:
                  # Send SNS notification for mobile app
                  sns.publish(
                      TopicArn=os.environ['SNS_TOPIC'],
                      Message=json.dumps({
                          'merchantId': merchant['merchantId'],
                          'decision': decision,
                          'comments': comments,
                          'businessName': merchant.get('businessName', 'Your Business')
                      }),
                      Subject=f'Merchant Application {decision.title()}'
                  )
                  
                  # Send email notification
                  email_subject = f'Your Merchant Application has been {decision.title()}'
                  email_body = f"""
                  Dear {merchant.get('ownerName', 'Merchant')},
                  
                  Your merchant application for "{merchant.get('businessName', 'Your Business')}" has been {decision}.
                  
                  {"Comments: " + comments if comments else ""}
                  
                  {"Welcome to our platform! You can now start accepting orders." if decision == 'approved' else "Please review the requirements and reapply if needed."}
                  
                  Best regards,
                  The Platform Team
                  """
                  
                  ses.send_email(
                      Source='noreply@yourplatform.com',
                      Destination={'ToAddresses': [merchant.get('email', '')]},
                      Message={
                          'Subject': {'Data': email_subject},
                          'Body': {'Text': {'Data': email_body}}
                      }
                  )
                  
              except Exception as e:
                  print(f"Notification error: {str(e)}")

  # SNS Topic for Merchant Notifications
  MerchantNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${Environment}-merchant-notifications'
      DisplayName: 'Merchant Notification Topic'

  # API Gateway Methods
  GetMerchantsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MerchantManagementAPI
      ResourceId: !Ref MerchantsResource
      HttpMethod: GET
      AuthorizationType: AWS_IAM
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetMerchantsFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  PostReviewMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MerchantManagementAPI
      ResourceId: !Ref ReviewResource
      HttpMethod: POST
      AuthorizationType: AWS_IAM
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReviewMerchantFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # CORS Options Methods
  MerchantsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MerchantManagementAPI
      ResourceId: !Ref MerchantsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ReviewOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MerchantManagementAPI
      ResourceId: !Ref ReviewResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Lambda Permissions
  GetMerchantsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetMerchantsFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MerchantManagementAPI}/*/*'

  ReviewMerchantPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ReviewMerchantFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MerchantManagementAPI}/*/*'

  # API Gateway Deployment
  MerchantAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GetMerchantsMethod
      - PostReviewMethod
      - MerchantsOptionsMethod
      - ReviewOptionsMethod
    Properties:
      RestApiId: !Ref MerchantManagementAPI
      StageName: !Ref Environment

  # IAM Roles
  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AppSyncPushToCloudWatchLogs
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt OrdersTable.Arn
                  - !GetAtt DriversTable.Arn
                  - !GetAtt MerchantsTable.Arn
                  - !GetAtt CustomersTable.Arn
                  - !Sub '${OrdersTable.Arn}/index/*'
                  - !Sub '${DriversTable.Arn}/index/*'
                  - !Sub '${MerchantsTable.Arn}/index/*'
                  - !Sub '${CustomersTable.Arn}/index/*'

Outputs:
  GraphQLAPIURL:
    Description: 'GraphQL API URL'
    Value: !GetAtt DeliveryGraphQLAPI.GraphQLUrl
    Export:
      Name: !Sub '${Environment}-GraphQLAPIURL'

  GraphQLAPIId:
    Description: 'GraphQL API ID'
    Value: !GetAtt DeliveryGraphQLAPI.ApiId
    Export:
      Name: !Sub '${Environment}-GraphQLAPIId'

  UserPoolId:
    Description: 'Cognito User Pool ID'
    Value: !Ref DeliveryUserPool
    Export:
      Name: !Sub '${Environment}-UserPoolId'

  UserPoolClientId:
    Description: 'Cognito User Pool Client ID'
    Value: !Ref DeliveryUserPoolClient
    Export:
      Name: !Sub '${Environment}-UserPoolClientId'

  OrdersTableName:
    Description: 'Orders DynamoDB Table Name'
    Value: !Ref OrdersTable
    Export:
      Name: !Sub '${Environment}-OrdersTable'

  DriversTableName:
    Description: 'Drivers DynamoDB Table Name'
    Value: !Ref DriversTable
    Export:
      Name: !Sub '${Environment}-DriversTable'

  MerchantsTableName:
    Description: 'Merchants DynamoDB Table Name'
    Value: !Ref MerchantsTable
    Export:
      Name: !Sub '${Environment}-MerchantsTable'

  CustomersTableName:
    Description: 'Customers DynamoDB Table Name'
    Value: !Ref CustomersTable
    Export:
      Name: !Sub '${Environment}-CustomersTable'

  MerchantManagementAPIURL:
    Description: 'Merchant Management API URL'
    Value: !Sub 'https://${MerchantManagementAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${Environment}-MerchantManagementAPIURL'

  MerchantNotificationTopicArn:
    Description: 'SNS Topic ARN for Merchant Notifications'
    Value: !Ref MerchantNotificationTopic
    Export:
      Name: !Sub '${Environment}-MerchantNotificationTopic'
