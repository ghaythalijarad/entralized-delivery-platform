AWSTemplateFormatVersion: '2010-09-09'
Description: 'Enhanced Merchant Management System - Support for 4 Merchant Types'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'staging', 'prod']
    Description: 'Environment name for resource naming'

Resources:
  # Enhanced Merchants Table with new schema
  MerchantsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${Environment}-merchants'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: merchantId
          AttributeType: S
        - AttributeName: merchantType
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
        - AttributeName: email
          AttributeType: S
        - AttributeName: district
          AttributeType: S
      KeySchema:
        - AttributeName: merchantId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TypeStatusIndex
          KeySchema:
            - AttributeName: merchantType
              KeyType: HASH
            - AttributeName: status
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: StatusCreatedIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: DistrictTypeIndex
          KeySchema:
            - AttributeName: district
              KeyType: HASH
            - AttributeName: merchantType
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: MerchantManagement

  # Lambda Functions for Merchant Management
  CreateMerchantFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-create-merchant'
      Runtime: nodejs18.x
      Handler: index.handler
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const dynamodb = new AWS.DynamoDB.DocumentClient();
          const { v4: uuidv4 } = require('uuid');

          exports.handler = async (event) => {
              try {
                  console.log('Event:', JSON.stringify(event, null, 2));
                  
                  const body = typeof event.body === 'string' ? JSON.parse(event.body) : event.body;
                  
                  // Validate required fields
                  const requiredFields = ['businessName', 'ownerFirstName', 'ownerLastName', 'email', 'phoneNumber', 'merchantType', 'address'];
                  const missingFields = requiredFields.filter(field => !body[field]);
                  
                  if (missingFields.length > 0) {
                      return {
                          statusCode: 400,
                          headers: {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*'
                          },
                          body: JSON.stringify({
                              error: 'Missing required fields',
                              missingFields
                          })
                      };
                  }

                  // Validate merchant type
                  const validTypes = ['restaurant', 'store', 'pharmacy', 'cloud_kitchen'];
                  if (!validTypes.includes(body.merchantType)) {
                      return {
                          statusCode: 400,
                          headers: {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*'
                          },
                          body: JSON.stringify({
                              error: 'Invalid merchant type',
                              validTypes
                          })
                      };
                  }

                  const merchantId = uuidv4();
                  const now = new Date().toISOString();

                  const merchant = {
                      merchantId,
                      businessName: body.businessName,
                      ownerFirstName: body.ownerFirstName,
                      ownerLastName: body.ownerLastName,
                      email: body.email,
                      phoneNumber: body.phoneNumber,
                      merchantType: body.merchantType,
                      address: {
                          street: body.address.street,
                          city: body.address.city,
                          district: body.address.district,
                          postalCode: body.address.postalCode || ''
                      },
                      district: body.address.district, // For GSI
                      status: 'pending',
                      createdAt: now,
                      updatedAt: now,
                      ...(body.licenseNumber && { licenseNumber: body.licenseNumber }),
                      ...(body.description && { description: body.description })
                  };

                  await dynamodb.put({
                      TableName: process.env.MERCHANTS_TABLE,
                      Item: merchant
                  }).promise();

                  return {
                      statusCode: 201,
                      headers: {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      body: JSON.stringify(merchant)
                  };

              } catch (error) {
                  console.error('Error:', error);
                  return {
                      statusCode: 500,
                      headers: {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      body: JSON.stringify({
                          error: 'Internal server error',
                          message: error.message
                      })
                  };
              }
          };
      Environment:
        Variables:
          MERCHANTS_TABLE: !Ref MerchantsTable
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30

  GetMerchantsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-get-merchants'
      Runtime: nodejs18.x
      Handler: index.handler
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const dynamodb = new AWS.DynamoDB.DocumentClient();

          exports.handler = async (event) => {
              try {
                  console.log('Event:', JSON.stringify(event, null, 2));
                  
                  const queryParams = event.queryStringParameters || {};
                  const { status, merchantType, district } = queryParams;

                  let params;

                  if (status && merchantType) {
                      // Query by status and type
                      params = {
                          TableName: process.env.MERCHANTS_TABLE,
                          IndexName: 'TypeStatusIndex',
                          KeyConditionExpression: 'merchantType = :type AND #status = :status',
                          ExpressionAttributeNames: {
                              '#status': 'status'
                          },
                          ExpressionAttributeValues: {
                              ':type': merchantType,
                              ':status': status
                          }
                      };
                  } else if (status) {
                      // Query by status only
                      params = {
                          TableName: process.env.MERCHANTS_TABLE,
                          IndexName: 'StatusCreatedIndex',
                          KeyConditionExpression: '#status = :status',
                          ExpressionAttributeNames: {
                              '#status': 'status'
                          },
                          ExpressionAttributeValues: {
                              ':status': status
                          }
                      };
                  } else if (district && merchantType) {
                      // Query by district and type
                      params = {
                          TableName: process.env.MERCHANTS_TABLE,
                          IndexName: 'DistrictTypeIndex',
                          KeyConditionExpression: 'district = :district AND merchantType = :type',
                          ExpressionAttributeValues: {
                              ':district': district,
                              ':type': merchantType
                          }
                      };
                  } else {
                      // Scan all merchants
                      params = {
                          TableName: process.env.MERCHANTS_TABLE
                      };
                  }

                  const result = params.KeyConditionExpression 
                      ? await dynamodb.query(params).promise()
                      : await dynamodb.scan(params).promise();

                  return {
                      statusCode: 200,
                      headers: {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      body: JSON.stringify({
                          merchants: result.Items,
                          count: result.Count
                      })
                  };

              } catch (error) {
                  console.error('Error:', error);
                  return {
                      statusCode: 500,
                      headers: {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      body: JSON.stringify({
                          error: 'Internal server error',
                          message: error.message
                      })
                  };
              }
          };
      Environment:
        Variables:
          MERCHANTS_TABLE: !Ref MerchantsTable
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30

  UpdateMerchantFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-update-merchant'
      Runtime: nodejs18.x
      Handler: index.handler
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const dynamodb = new AWS.DynamoDB.DocumentClient();

          exports.handler = async (event) => {
              try {
                  console.log('Event:', JSON.stringify(event, null, 2));
                  
                  const merchantId = event.pathParameters?.merchantId;
                  const body = typeof event.body === 'string' ? JSON.parse(event.body) : event.body;

                  if (!merchantId) {
                      return {
                          statusCode: 400,
                          headers: {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*'
                          },
                          body: JSON.stringify({
                              error: 'Merchant ID is required'
                          })
                      };
                  }

                  const now = new Date().toISOString();
                  
                  // Build update expression dynamically
                  let updateExpression = 'SET updatedAt = :updatedAt';
                  const expressionAttributeValues = {
                      ':updatedAt': now
                  };

                  if (body.status) {
                      updateExpression += ', #status = :status';
                      expressionAttributeValues[':status'] = body.status;
                  }

                  if (body.reviewNotes) {
                      updateExpression += ', reviewNotes = :reviewNotes';
                      expressionAttributeValues[':reviewNotes'] = body.reviewNotes;
                  }

                  if (body.reviewedBy) {
                      updateExpression += ', reviewedBy = :reviewedBy';
                      expressionAttributeValues[':reviewedBy'] = body.reviewedBy;
                  }

                  const params = {
                      TableName: process.env.MERCHANTS_TABLE,
                      Key: { merchantId },
                      UpdateExpression: updateExpression,
                      ExpressionAttributeValues: expressionAttributeValues,
                      ReturnValues: 'ALL_NEW'
                  };

                  if (body.status) {
                      params.ExpressionAttributeNames = { '#status': 'status' };
                  }

                  const result = await dynamodb.update(params).promise();

                  return {
                      statusCode: 200,
                      headers: {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      body: JSON.stringify(result.Attributes)
                  };

              } catch (error) {
                  console.error('Error:', error);
                  return {
                      statusCode: 500,
                      headers: {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      body: JSON.stringify({
                          error: 'Internal server error',
                          message: error.message
                      })
                  };
              }
          };
      Environment:
        Variables:
          MERCHANTS_TABLE: !Ref MerchantsTable
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30

  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt MerchantsTable.Arn
                  - !Sub '${MerchantsTable.Arn}/index/*'

  # API Gateway
  MerchantAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${Environment}-merchant-api'
      Description: 'Merchant Management API'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resources and Methods
  MerchantsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MerchantAPI
      ParentId: !GetAtt MerchantAPI.RootResourceId
      PathPart: merchants

  MerchantResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MerchantAPI
      ParentId: !Ref MerchantsResource
      PathPart: '{merchantId}'

  # POST /merchants
  CreateMerchantMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MerchantAPI
      ResourceId: !Ref MerchantsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateMerchantFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: '200'
          ResponseHeaders:
            Access-Control-Allow-Origin: "'*'"
        - StatusCode: '400'
        - StatusCode: '500'

  # GET /merchants
  GetMerchantsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MerchantAPI
      ResourceId: !Ref MerchantsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetMerchantsFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: '200'
          ResponseHeaders:
            Access-Control-Allow-Origin: "'*'"

  # PUT /merchants/{merchantId}
  UpdateMerchantMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MerchantAPI
      ResourceId: !Ref MerchantResource
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateMerchantFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: '200'
          ResponseHeaders:
            Access-Control-Allow-Origin: "'*'"

  # CORS Options Methods
  MerchantsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MerchantAPI
      ResourceId: !Ref MerchantsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: '200'
          ResponseHeaders:
            Access-Control-Allow-Headers: true
            Access-Control-Allow-Methods: true
            Access-Control-Allow-Origin: true

  MerchantOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MerchantAPI
      ResourceId: !Ref MerchantResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: '200'
          ResponseHeaders:
            Access-Control-Allow-Headers: true
            Access-Control-Allow-Methods: true
            Access-Control-Allow-Origin: true

  # Lambda Permissions
  CreateMerchantPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CreateMerchantFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MerchantAPI}/*/*'

  GetMerchantsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetMerchantsFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MerchantAPI}/*/*'

  UpdateMerchantPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UpdateMerchantFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MerchantAPI}/*/*'

  # API Gateway Deployment
  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - CreateMerchantMethod
      - GetMerchantsMethod
      - UpdateMerchantMethod
      - MerchantsOptionsMethod
      - MerchantOptionsMethod
    Properties:
      RestApiId: !Ref MerchantAPI
      StageName: !Ref Environment

Outputs:
  MerchantsTableName:
    Description: 'Merchants DynamoDB Table Name'
    Value: !Ref MerchantsTable
    Export:
      Name: !Sub '${Environment}-MerchantsTable'

  MerchantAPIEndpoint:
    Description: 'Merchant API Gateway endpoint URL'
    Value: !Sub 'https://${MerchantAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${Environment}-MerchantAPIEndpoint'

  CreateMerchantFunctionArn:
    Description: 'Create Merchant Lambda Function ARN'
    Value: !GetAtt CreateMerchantFunction.Arn
    Export:
      Name: !Sub '${Environment}-CreateMerchantFunction'

  GetMerchantsFunctionArn:
    Description: 'Get Merchants Lambda Function ARN'
    Value: !GetAtt GetMerchantsFunction.Arn
    Export:
      Name: !Sub '${Environment}-GetMerchantsFunction'

  UpdateMerchantFunctionArn:
    Description: 'Update Merchant Lambda Function ARN'
    Value: !GetAtt UpdateMerchantFunction.Arn
    Export:
      Name: !Sub '${Environment}-UpdateMerchantFunction'